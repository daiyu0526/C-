//C语言学习练习题中的值得记录知识点

// 1.求解1-1/2+1/3-...+1/n

#include<stdio.h>
int main(void)
{
	double sum = 0.0;            //浮点型在初始化时，数字需带上小数点来表示
	int i,number, sign = 1;

	scanf_s("%d", &number);
	for (i = 1; i <= number; i++)
	{
		sum += sign * 1.0 / i;       //这里i为整形数据，但前面都是浮点型数据，再进行整型转化至浮点型时常用乘1.0
                sign = -sign;                //题目这里的变号比较巧
	}
	printf("sum=%f\n", sum);
	return 0;
}







//2.正序地分解整数 例：输入12345；输出：1 2 3 4 5

#include<stdio.h>
int main(void)
{
	int number, d = 0, ret = 0,b=0;

	scanf_s("%d", &number);
	do 
	{
		d = number % 10;
		number = number / 10;
		ret = ret * 10 + d;
	} while (number > 0);
	printf("%d", ret);
	printf("\n");                   //这个代码将数进行一次倒序
	                                //而后在下一个while循环中进行倒序逐个输出，可得最终结果
	do                              //这里是一个替代转向思维，有的无法直接解决的问题，我们可用别的问题再转换
	{                               //但这个问题无法将700转化为007
		b = ret % 10;           // **在if语句中经常将这个赋值符号=与判断符号==搞混
		printf("%d", b);
		if (ret > 9) 
		{
			printf(" ");
		}
		ret = ret / 10;
	} while (ret > 0);
	printf("\n");

	return 0;
}                        


//针对上述问题中无法适用于末尾有0的数字，则对上述代码再次实行更改

#include<stdio.h>
int main(void)
{
	int number, base = 1, d = 0, x = 0;                                //这里包含了两个部分 数整数位数+正序输出  有很多问题都是由小的问题进行组合解决的
	scanf_s("%d", &number);                                            //数位数是为了能够形成，例如：54321，得到：10000，再除再取余可进行
	x = number;                                                        
	if (number == 0)                      //在进行if语句判断时经常将==与赋值的=搞混
	{
		base = 0;                     //0是一个一位数，因此这里单独列出
		printf("base=%d\n", base);
	}
	else
	{
		while (number > 9)            //************number的不断条件是大于9，不是大于0，若是大于0，则会出现number=700，base=1000的情况
		{
			number = number / 10;
			base *= 10;           //************
		}
		printf("base=%d\n", base);
	}                                     //以上这里都是数整数位数的地方，同时得到了进制基数
	
	do                                    //这里是进行了整数顺序输出，这里也可以用while不用do—while
	{
		d = x / base;                 //这里得到正的第一位数
		printf("%d",d);               //输出
		if (base > 9)                 //这里将整数的每一位都分开
		{
			printf(" ");
		}
		x %= base;
		base /= 10;                   
	} while (base > 0);
	printf("\n");
	return 0;	
}







//计算机在计算一些基础问题时常爱用枚举法
//scanf_s在输入多个数字时，代码中可以不用空格隔开，可以写成scanf_s("%d%d", &u, &v); 但在输入时只能用空格隔开
//3.计算最大公约数

#include<stdio.h>                              //这是我的代码，这里也是运用到之前学的小方法来设置了一下变量
int main(void)                                 //这个没设最小值，但是运用了&&符号也可以保证t不会大于两个数中的任意一个
{
	int u, v, t = 2, x = 0;
	scanf_s("%d%d", &u, &v);
	while (u >= t && v >= t) 
	{
		if (u % t == 0 && v % t == 0) 
		{
			x = t;
		}
		t++;
	}
	if (x == 0)
	{
		printf("两个数无最大公约数");
	}
	else
	{
		printf("最大公约数%d", x);
	}
	return 0;	
}

#include<stdio.h>                               //老师的代码，运用了for循环且判断语句用if执行
int main(void)
{
	int u, v, min, i, ret;
	scanf("%d%d", u, v);
	if (u > v)
	{
		min = u;
	}
	else
	{
		min = v;
	}
	for (i = 1; i < min; i++) 
	{
		if (u % i == 0) 
		{
			if (v % i == 0) 
			{
				ret = i;
			}
		}
	}
	printf("%d", ret);
	return 0;	
}

//************以上两种方法效率低，所以这里用辗转相除法





